{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "78761106",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a656c4a0",
   "metadata": {},
   "source": [
    "# Goal:- Given this Features we need to predict if passeneger will survived or Not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "340ba35c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"titanic_train.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "raw",
   "id": "b37b873f",
   "metadata": {},
   "source": [
    "- Our Variable Features:\n",
    "\n",
    "\n",
    "- PassengerId: Unique number of each passenger.\n",
    "- Survived: 0 = No, 1 = Yes.\n",
    "- Pclass: Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd.\n",
    "- Name :- Name of the passengers.\n",
    "- Sex :- 1:Male, 0:Female.\n",
    "- Age :- Age of the passengers.\n",
    "- SibSp: Siblings / Spouses Onboard in the Titanic Ship.\n",
    "- Parch: Parents / Children Onboard in the Titanic Ship.\n",
    "- Ticket: Ticket number.\n",
    "- Fare: Passenger fare (Ticket Price).\n",
    "- Cabin: Cabin number.\n",
    "- Embarked: Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a869f7ce",
   "metadata": {},
   "source": [
    "- pclass: A proxy for socio-economic status (SES)\n",
    "        \n",
    "      1st = Upper.\n",
    "      2nd = Middle.\n",
    "      3rd = Lower.\n",
    "- age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5.\n",
    "- sibsp: The dataset defines family relations in this way...\n",
    "\n",
    "      Sibling = Brother, Sister, Stepbrother, Stepsister.\n",
    "      Spouse = Husband, Wife (Mistresses and FiancÃ©s were ignored).\n",
    "- parch: The dataset defines family relations in this way...\n",
    "\n",
    "      Parent = Mother, Father.\n",
    "      Child = Daughter, Son, Stepdaughter, Stepson.\n",
    "      \n",
    "      Some children travelled only with a nanny, therefore parch=0 for them."
   ]
  },
  {
   "cell_type": "raw",
   "id": "cdd3b0c8",
   "metadata": {},
   "source": [
    "The SibSp column represents the number of siblings or spouses that a passenger had on board the Titanic. A sibling is defined as a brother or sister of the passenger, while a spouse is defined as a husband or wife. For example, a value of 1 in the SibSp column means that the passenger had one sibling or spouse on board, while a value of 0 means that the passenger was traveling alone.\n",
    "\n",
    "The Parch column represents the number of parents or children that a passenger had on board the Titanic. A parent is defined as a mother or father of the passenger, while a child is defined as a son or daughter. For example, a value of 1 in the Parch column means that the passenger had one parent or child on board, while a value of 0 means that the passenger was not traveling with any parents or children."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2f14cc23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f66de893",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cb52f1d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    549\n",
       "1    342\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Survived\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "41734347",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df,x=\"Survived\",palette=\"rainbow\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6e454546",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(df[\"Survived\"].value_counts(), labels=[\"Die\",\"Survived\"],autopct=\"%1.1f%%\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e4483806",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "male      577\n",
       "female    314\n",
       "Name: Sex, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Sex\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "33e17a9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='Sex', ylabel='count'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df,x=\"Sex\",palette=\"rainbow\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f1c71392",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(df[\"Sex\"].value_counts(), labels=[\"Male\",\"Female\"],autopct=\"%1.1f%%\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "27fbdc60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df,x='Survived',hue=\"Sex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "738a559c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    491\n",
       "1    216\n",
       "2    184\n",
       "Name: Pclass, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Pclass\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d9bfae65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='Survived', ylabel='count'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8o6BhiAAAACXBIWXMAAAsTAAALEwEAmpwYAAAWtklEQVR4nO3de5BedZ3n8ffHkCGsoAhpMCawQZcduaaBluCAqLDsAOVOHG4DIhdNGacKEYsZdrzVCoxSUiNeZwWhUC7FIqCjsqA4LMi6ooKJZGIC4xIxTDoTIQSRsFxM4nf/6JNDD3RIJ+mnn276/ao61ef5nd/5Pd/WVH/4nWuqCkmSAF7R7QIkSWOHoSBJahkKkqSWoSBJahkKkqTWNt0uYGtMnTq1Zs6c2e0yJGlcWbBgwWNV1TPUtnEdCjNnzmT+/PndLkOSxpUkD29sm4ePJEktQ0GS1DIUJEmtcX1OQZK6Ze3atfT39/Pss892u5SNmjJlCjNmzGDy5MnD3sdQkKQt0N/fzw477MDMmTNJ0u1yXqSqWL16Nf39/eyxxx7D3s/DR5K0BZ599ll23nnnMRkIAEnYeeedN3smYyhI0hYaq4GwwZbUZyhIklqGgiSNoEmTJtHb28u+++7LiSeeyNNPP73Rvueffz6f+cxnRrG6TfNEszru0C8d2u0SNtvdZ9/d7RI0Tm233XYsXLgQgFNPPZXLLruMc889t7tFbQZnCpLUIW95y1tYunQpANdccw37778/s2bN4rTTTntR3yuuuII3velNzJo1i+OPP76dYdx0003su+++zJo1i8MPPxyAJUuWcPDBB9Pb28v+++/Pgw8+OGI1O1OQpA5Yt24d3/ve9zj66KNZsmQJn/zkJ/nxj3/M1KlTefzxx1/U/7jjjuN973sfAB//+Me58sorOfvss7nwwgv5/ve/z/Tp03niiScAuOyyyzjnnHM49dRT+f3vf8/69etHrG5nCpI0gp555hl6e3vp6+tj9913Z+7cudx5552ceOKJTJ06FYCddtrpRfstXryYt7zlLey3335cd911LFmyBIBDDz2UM888kyuuuKL94//mN7+Ziy66iIsvvpiHH36Y7bbbbsTqd6YgSSNo8DmFzXHmmWfy7W9/m1mzZnHVVVdx1113AQOzgnvuuYdbb72Vgw46iAULFvCud72L2bNnc+utt3Lsscfyla98hSOOOGJE6nemIEkddsQRR3DTTTexevVqgCEPH61Zs4Zp06axdu1arrvuurb9V7/6FbNnz+bCCy+kp6eH5cuX89BDD/H617+eD37wg8yZM4dFixaNWK3OFCSpw/bZZx8+9rGP8da3vpVJkyZxwAEHcNVVV/2bPn/7t3/L7Nmz6enpYfbs2axZswaA8847jwcffJCq4sgjj2TWrFlcfPHFXHvttUyePJnXvva1fPSjHx2xWlNVIzbYaOvr6ytfsjP2eUmqXo4eeOAB9tprr26XsUlD1ZlkQVX1DdXfw0eSpFbHQiHJlCT3JvmnJEuSXNC0X5Xk10kWNktv054kX0yyNMmiJAd2qjZJ0tA6eU7hOeCIqnoqyWTgR0m+12w7r6q+8YL+xwB7Nsts4NLmpyRplHRsplADnmo+Tm6WlzqBMQe4ptnvp8COSaZ1qj5J0ot19JxCkklJFgKPArdX1T3Npk81h4g+l2Tbpm06sHzQ7v1N2wvHnJdkfpL5q1at6mT5kjThdDQUqmp9VfUCM4CDk+wLfAR4I/AmYCfgbzZzzMurqq+q+np6eka6ZEma0EblPoWqeiLJD4Cjq2rDc2KfS/I14K+bzyuA3QbtNqNpk6Qx76DzrhnR8Rb83emb7PPe976XW265hV122YXFixePyPd28uqjniQ7NuvbAUcB/7zhPEEGXgn0TmDDb3IzcHpzFdIhwO+qamWn6pOk8e7MM8/ktttuG9ExOzlTmAZcnWQSA+FzY1XdkuTOJD1AgIXAXzb9vwscCywFngbe08HaJGncO/zww1m2bNmIjtmxUKiqRcABQ7QP+dSmGri1+qxO1SNJ2jTvaJYktQwFSVLLUJAktXx0tiSNgOFcQjrSTjnlFO666y4ee+wxZsyYwQUXXMDcuXO3akxDQZLGqeuvv37Ex/TwkSSpZShIklqGgiSpZShIklqGgiSpZShIklpekipJI+BfLtxvRMfb/b/94iW3L1++nNNPP51HHnmEJMybN49zzjlnq7/XUJCkcWibbbbhkksu4cADD2TNmjUcdNBBHHXUUey9995bNa6HjyRpHJo2bRoHHnggADvssAN77bUXK1Zs/XvJDAVJGueWLVvGfffdx+zZs7d6LENBksaxp556iuOPP57Pf/7zvOpVr9rq8QwFSRqn1q5dy/HHH8+pp57KcccdNyJjGgqSNA5VFXPnzmWvvfbi3HPPHbFxvfpIkkbApi4hHWl333031157Lfvttx+9vb0AXHTRRRx77LFbNW7HQiHJFOCHwLbN93yjqj6RZA/g68DOwALgtKr6fZJtgWuAg4DVwF9U1bJO1SdJ49lhhx3GwKvtR1YnDx89BxxRVbOAXuDoJIcAFwOfq6r/APwW2PBGiLnAb5v2zzX9JEmjqGOhUAOeaj5ObpYCjgC+0bRfDbyzWZ/TfKbZfmSSdKo+SdKLdfREc5JJSRYCjwK3A78CnqiqdU2XfmB6sz4dWA7QbP8dA4eYXjjmvCTzk8xftWpVJ8uXpAmno6FQVeurqheYARwMvHEExry8qvqqqq+np2drh5MkDTIql6RW1RPAD4A3Azsm2XCCewaw4b7sFcBuAM32VzNwwlmSNEo6FgpJepLs2KxvBxwFPMBAOJzQdDsD+E6zfnPzmWb7ndWJU+uSpI3q5H0K04Crk0xiIHxurKpbktwPfD3JJ4H7gCub/lcC1yZZCjwOnNzB2iRpRB36pUNHdLy7z777Jbc/++yzHH744Tz33HOsW7eOE044gQsuuGCrv7djoVBVi4ADhmh/iIHzCy9sfxY4sVP1SNLLybbbbsudd97J9ttvz9q1aznssMM45phjOOSQQ7ZqXB9zIUnjUBK23357YOAZSGvXrmUkruI3FCRpnFq/fj29vb3ssssuHHXUUT46W5ImskmTJrFw4UL6+/u59957Wbx48VaPaShI0ji344478va3v53bbrttq8cyFCRpHFq1ahVPPPEEAM888wy33347b3zjVt8f7KOzJWkkbOoS0pG2cuVKzjjjDNavX88f/vAHTjrpJN7xjnds9biGgiSNQ/vvvz/33XffiI/r4SNJUstQkCS1DAVJ2kJj/fFsW1KfoSBJW2DKlCmsXr16zAZDVbF69WqmTJmyWft5olmStsCMGTPo7+9nLL/sa8qUKcyYMWOz9jEUJGkLTJ48mT322KPbZYw4Dx9JklqGgiSpZShIklqGgiSpZShIklodC4UkuyX5QZL7kyxJck7Tfn6SFUkWNsuxg/b5SJKlSX6Z5E87VZskaWidvCR1HfBXVfXzJDsAC5Lc3mz7XFV9ZnDnJHsDJwP7AK8D/leS/1hV6ztYoyRpkI7NFKpqZVX9vFlfAzwATH+JXeYAX6+q56rq18BS4OBO1SdJerFROaeQZCZwAHBP0/SBJIuSfDXJa5q26cDyQbv189IhIkkaYR0PhSTbA98EPlRVTwKXAm8AeoGVwCWbOd68JPOTzB/Lt5dL0njU0VBIMpmBQLiuqv4BoKoeqar1VfUH4AqeP0S0Atht0O4zmrZ/o6our6q+qurr6enpZPmSNOF08uqjAFcCD1TVZwe1TxvU7c+Bxc36zcDJSbZNsgewJ3Bvp+qTJL1YJ68+OhQ4DfhFkoVN20eBU5L0AgUsA94PUFVLktwI3M/AlUtneeWRJI2ujoVCVf0IyBCbvvsS+3wK+FSnapIkvTTvaJYktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVJrWKGQ5I7htEmSxreXfJ9CkinAvwOmJnkNz78f4VXA9A7XJkkaZZt6yc77gQ8BrwMW8HwoPAn8fefKkiR1w0uGQlV9AfhCkrOr6kujVJMkqUuG9TrOqvpSkj8BZg7ep6qu6VBdkqQuGO6J5muBzwCHAW9qlr5N7LNbkh8kuT/JkiTnNO07Jbk9yYPNz9c07UnyxSRLkyxKcuBW/WaSpM02rJkCAwGwd1XVZoy9Dvirqvp5kh2ABUluB84E7qiqTyf5MPBh4G+AY4A9m2U2cGnzU5I0SoZ7n8Ji4LWbM3BVrayqnzfra4AHGLhiaQ5wddPtauCdzfoc4Joa8FNgxyTTNuc7JUlbZ7gzhanA/UnuBZ7b0FhVfzacnZPMBA4A7gF2raqVzabfALs269OB5YN262/aVg5qI8k8YB7A7rvvPszyJUnDMdxQOH9LvyDJ9sA3gQ9V1ZNJ2m1VVUk255AUVXU5cDlAX1/fZu0rSXppw7366H9vyeBJJjMQCNdV1T80zY8kmVZVK5vDQ4827SuA3QbtPqNpkySNkuFefbQmyZPN8myS9Ume3MQ+Aa4EHqiqzw7adDNwRrN+BvCdQe2nN1chHQL8btBhJknSKBjuTGGHDevNH/s5wCGb2O1Q4DTgF0kWNm0fBT4N3JhkLvAwcFKz7bvAscBS4GngPcP7FSRJI2W45xRazWWp307yCQYuJ91Yvx/x/GMxXujIjYx71ubWI0kaOcMKhSTHDfr4CgbuW3i2IxVJkrpmuDOF/zJofR2wjIFDSJKkl5HhnlPw+L4kTQDDvfpoRpJvJXm0Wb6ZZEani5Mkja7hPubiawxcMvq6ZvmfTZsk6WVkuKHQU1Vfq6p1zXIV0NPBuiRJXTDcUFid5N1JJjXLu4HVnSxMkjT6hhsK72XgJrPfMPCAuhMYeAS2JOllZLiXpF4InFFVv4WBF+Uw8NKd93aqMEnS6BvuTGH/DYEAUFWPM/AobEnSy8hwQ+EVG16bCe1MYbMfkSFJGtuG+4f9EuAnSW5qPp8IfKozJUmSumW4dzRfk2Q+cETTdFxV3d+5siRJ3TDsQ0BNCBgEkvQyNtxzCpKkCcBQkCS1DAVJUstQkCS1DAVJUqtjoZDkq827FxYPajs/yYokC5vl2EHbPpJkaZJfJvnTTtUlSdq4Ts4UrgKOHqL9c1XV2yzfBUiyN3AysE+zz5eTTOpgbZKkIXQsFKrqh8Djw+w+B/h6VT1XVb8GlgIHd6o2SdLQunFO4QNJFjWHlzY8T2k6sHxQn/6m7UWSzEsyP8n8VatWdbpWSZpQRjsULgXeAPQy8F6GSzZ3gKq6vKr6qqqvp8eXv0nSSBrVUKiqR6pqfVX9AbiC5w8RrQB2G9R1RtMmSRpFoxoKSaYN+vjnwIYrk24GTk6ybZI9gD2Be0ezNklSB9+JkOR64G3A1CT9wCeAtyXpBQpYBrwfoKqWJLmRgQfurQPOqqr1napNkjS0joVCVZ0yRPOVL9H/U/iOBknqKu9oliS1DAVJUsv3LEtj1EHnXdPtEjbbgr87vdslaCs5U5AktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktQwFSVLLUJAktbyjWdKEduiXDu12CZvl7rPv7uj4zhQkSS1DQZLUMhQkSS1DQZLUMhQkSS1DQZLU6lgoJPlqkkeTLB7UtlOS25M82Px8TdOeJF9MsjTJoiQHdqouSdLGdXKmcBVw9AvaPgzcUVV7Anc0nwGOAfZslnnApR2sS5K0ER0Lhar6IfD4C5rnAFc361cD7xzUfk0N+CmwY5JpnapNkjS00T6nsGtVrWzWfwPs2qxPB5YP6tfftL1IknlJ5ieZv2rVqs5VKkkTUNdONFdVAbUF+11eVX1V1dfT09OByiRp4hrtZx89kmRaVa1sDg892rSvAHYb1G9G06Yh/MuF+3W7hM3zmld1uwJJwzTaM4WbgTOa9TOA7wxqP725CukQ4HeDDjNJkkZJx2YKSa4H3gZMTdIPfAL4NHBjkrnAw8BJTffvAscCS4Gngfd0qi5J0sZ1LBSq6pSNbDpyiL4FnNWpWiRJw+MdzZKkli/ZkTRixt1FEOCFEC/gTEGS1DIUJEktQ0GS1Jrw5xQOOu+abpew2b61Q7crkPRy5UxBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktQyFCRJLUNBktTqylNSkywD1gDrgXVV1ZdkJ+AGYCawDDipqn7bjfokaaLq5kzh7VXVW1V9zecPA3dU1Z7AHc1nSdIoGkuHj+YAVzfrVwPv7F4pkjQxdSsUCvjHJAuSzGvadq2qlc36b4Bdh9oxybwk85PMX7Vq1WjUKkkTRrfevHZYVa1Isgtwe5J/HryxqipJDbVjVV0OXA7Q19c3ZB9J0pbpykyhqlY0Px8FvgUcDDySZBpA8/PRbtQmSRPZqIdCklcm2WHDOvCfgcXAzcAZTbczgO+Mdm2SNNF14/DRrsC3kmz4/v9RVbcl+RlwY5K5wMPASV2oTZImtFEPhap6CJg1RPtq4MjRrkeS9LyxdEmqJKnLDAVJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1DAVJUstQkCS1xlwoJDk6yS+TLE3y4W7XI0kTyZgKhSSTgP8OHAPsDZySZO/uViVJE8eYCgXgYGBpVT1UVb8Hvg7M6XJNkjRhbNPtAl5gOrB80Od+YPbgDknmAfOaj08l+eUo1TZm/PvODT0VeKxzw48f+WC6XcK45L/Nzhuhf5sb/b9qrIXCJlXV5cDl3a7j5SjJ/Krq63Yd0gv5b3P0jLXDRyuA3QZ9ntG0SZJGwVgLhZ8BeybZI8kfAScDN3e5JkmaMMbU4aOqWpfkA8D3gUnAV6tqSZfLmkg8LKexyn+boyRV1e0aJEljxFg7fCRJ6iJDQZLUMhTko0U0ZiX5apJHkyzudi0ThaEwwfloEY1xVwFHd7uIicRQkI8W0ZhVVT8EHu92HROJoaChHi0yvUu1SOoyQ0GS1DIU5KNFJLUMBfloEUktQ2GCq6p1wIZHizwA3OijRTRWJLke+Anwx0n6k8ztdk0vdz7mQpLUcqYgSWoZCpKklqEgSWoZCpKklqEgSWoZChKQ5GNJliRZlGRhktkjMOafjdRTZ5M8NRLjSJviJama8JK8Gfgs8Laqei7JVOCPqupfh7HvNs29Hp2u8amq2r7T3yM5U5BgGvBYVT0HUFWPVdW/JlnWBARJ+pLc1ayfn+TaJHcD1yb5aZJ9NgyW5K6m/5lJ/j7Jq5M8nOQVzfZXJlmeZHKSNyS5LcmCJP8nyRubPnsk+UmSXyT55Cj/76EJzFCQ4B+B3ZL83yRfTvLWYeyzN/CfquoU4AbgJIAk04BpVTV/Q8eq+h2wENgw7juA71fVWgZeSH92VR0E/DXw5abPF4BLq2o/YOXW/oLScBkKmvCq6ingIGAesAq4IcmZm9jt5qp6plm/ETihWT8J+MYQ/W8A/qJZP7n5ju2BPwFuSrIQ+AoDsxaAQ4Hrm/VrN+f3kbbGNt0uQBoLqmo9cBdwV5JfAGcA63j+P5ymvGCX/zdo3xVJVifZn4E//H85xFfcDFyUZCcGAuhO4JXAE1XVu7Gytuy3kbacMwVNeEn+OMmeg5p6gYeBZQz8AQc4fhPD3AD8V+DVVbXohRub2cjPGDgsdEtVra+qJ4FfJzmxqSNJZjW73M3AjALg1M3+paQtZChIsD1wdZL7kyxi4HzB+cAFwBeSzAfWb2KMbzDwR/zGl+hzA/Du5ucGpwJzk/wTsITnX4V6DnBWM2vxTXgaNV6SKklqOVOQJLUMBUlSy1CQJLUMBUlSy1CQJLUMBUlSy1CQJLX+P51gQjeeJ0vBAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df,x=\"Survived\",hue=\"Pclass\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "573943a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='Sex', ylabel='count'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8o6BhiAAAACXBIWXMAAAsTAAALEwEAmpwYAAAXkUlEQVR4nO3de5BedZ3n8ffHEIkjKGIajAQ36GSHm6SBQGBAVBiGS7kTDMKCjBBNGacWEZeRWm87cnXHVbzOjICFcilWBS/IgMIyKLqigolETECXqDh0JkITDIZFMAnf/aNPDj3QSTqkn366k/er6qk+53d+59ffwEM+/M41VYUkSQDP63YBkqSxw1CQJLUMBUlSy1CQJLUMBUlSa5tuF7A5Jk+eXNOmTet2GZI0rixcuPDhquoZatu4DoVp06axYMGCbpchSeNKkt+sb5uHjyRJLUNBktQyFCRJrXF9TkGSumX16tX09fXxxBNPdLuU9Zo0aRJTp05l4sSJw96nY6GQZBLwPWDb5vd8pao+lORy4LXAo03XuVW1KEmATwHHAo837T/pVH2StDn6+vrYfvvtmTZtGgN/fY0tVcWKFSvo6+tjt912G/Z+nZwpPAkcXlWPJZkIfD/Jt5ptZ1fVV57R/xhgevOZBXy2+SlJY84TTzwxZgMBIAkvfelL6e/v36T9OnZOoQY81qxObD4beiTrbODKZr8fATskmdKp+iRpc43VQFjnudTX0RPNSSYkWQQ8BNxSVXc0my5McneSTyTZtmnbBXhg0O59Tdszx5yfZEGSBZuagJKkDetoKFTV2qrqBaYCBybZG3gfsDtwALAj8N82ccxLq2pmVc3s6RnyhjxJ6poJEybQ29vL3nvvzQknnMDjjz++3r7nnHMOH/vYx0axuo0blauPqmplku8AR1fVun8CTyb5AvCeZn0ZsOug3aY2bRrnDvnMId0uYZPdfsbt3S5B49QLXvACFi1aBMApp5zCxRdfzFlnndXdojZBx2YKSXqS7NAsvwA4Evj5uvMEzdVGxwGLm12uB07NgIOAR6tqeafqk6ROe81rXsPSpUsBuPLKK9lnn32YMWMGb3nLW57V93Of+xwHHHAAM2bM4Pjjj29nGNdeey177703M2bM4LDDDgNgyZIlHHjggfT29rLPPvtw3333jVjNnZwpTAGuSDKBgfC5pqpuSPLtJD1AgEXA3zT9v8nA5ahLGbgk9a0drE2SOmrNmjV861vf4uijj2bJkiVccMEF/OAHP2Dy5Mk88sgjz+o/Z84c3v72twPwwQ9+kMsuu4wzzjiD8847j5tvvplddtmFlStXAnDxxRdz5plncsopp/DHP/6RtWvXjljdHQuFqrob2HeI9sPX07+A0ztVjySNhj/84Q/09vYCAzOFefPmcckll3DCCScwefJkAHbcccdn7bd48WI++MEPsnLlSh577DGOOuooAA455BDmzp3LiSeeyJw5cwA4+OCDufDCC+nr62POnDlMnz59xOr3jmZJGkGDzylsirlz53LdddcxY8YMLr/8cm677TZgYFZwxx13cOONN7L//vuzcOFC3vzmNzNr1ixuvPFGjj32WC655BIOP3zI/9/eZD77SJI67PDDD+faa69lxYoVAEMePlq1ahVTpkxh9erVXH311W37L3/5S2bNmsV5551HT08PDzzwAL/61a945Stfybve9S5mz57N3XffPWK1OlOQpA7ba6+9+MAHPsBrX/taJkyYwL777svll1/+7/qcf/75zJo1i56eHmbNmsWqVasAOPvss7nvvvuoKo444ghmzJjBRz7yEa666iomTpzIy172Mt7//vePWK0ZOJQ/Ps2cObN8yc7Y5yWp2hLde++97LHHHt0uY6OGqjPJwqqaOVR/Dx9JklqGgiSpZShIklqGgiSpZShIklqGgiSp5X0KkjQC9j/7yhEdb+FHT91on7e97W3ccMMN7LTTTixevHij/YfDmYIkjVNz587lpptuGtExDQVJGqcOO+ywIR+utzkMBUlSy1CQJLUMBUlSy1CQJLW8JFWSRsBwLiEdaSeffDK33XYbDz/8MFOnTuXcc89l3rx5mzWmoSBJ49QXv/jFER/Tw0eSpJahIElqdSwUkkxKcmeSnyZZkuTcpn23JHckWZrky0me37Rv26wvbbZP61RtkqShdXKm8CRweFXNAHqBo5McBHwE+ERV/SnwO2DdWZF5wO+a9k80/SRJo6hjoVADHmtWJzafAg4HvtK0XwEc1yzPbtZpth+RJJ2qT5L0bB09p5BkQpJFwEPALcAvgZVVtabp0gfs0izvAjwA0Gx/FHjpEGPOT7IgyYL+/v5Oli9JW52OXpJaVWuB3iQ7AF8Hdh+BMS8FLgWYOXNmbe54kjQS/vW8V4/oeK/4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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=df,x=\"Sex\",hue=\"Pclass\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "59942e5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(df[\"Pclass\"].value_counts(), labels=[\"Third Class\",\"First Class\",\"Second Class\"],autopct=\"%1.1f%%\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6c1fe7f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    608\n",
       "1    209\n",
       "2     28\n",
       "4     18\n",
       "3     16\n",
       "8      7\n",
       "5      5\n",
       "Name: SibSp, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"SibSp\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d9218c4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    678\n",
       "1    118\n",
       "2     80\n",
       "5      5\n",
       "3      5\n",
       "4      4\n",
       "6      1\n",
       "Name: Parch, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Parch\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ffb31b33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7f701394",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df[\"Fare\"])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "eaa78ea0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[\"Fare\"].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9a6429cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='Age', ylabel='Density'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(df[\"Age\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "95156305",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot: title={'center': 'PassengerId'}>,\n",
       "        <AxesSubplot: title={'center': 'Survived'}>,\n",
       "        <AxesSubplot: title={'center': 'Pclass'}>],\n",
       "       [<AxesSubplot: title={'center': 'Age'}>,\n",
       "        <AxesSubplot: title={'center': 'SibSp'}>,\n",
       "        <AxesSubplot: title={'center': 'Parch'}>],\n",
       "       [<AxesSubplot: title={'center': 'Fare'}>, <AxesSubplot: >,\n",
       "        <AxesSubplot: >]], dtype=object)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x864 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(figsize=(18,12))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "02fa0593",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sns.pairplot(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "61a8e770",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sns.pairplot(df,hue=\"Survived\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "dfe2226b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.corr(),annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67607656",
   "metadata": {},
   "source": [
    "# Data Clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b4e6d249",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "54e8285c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap=\"viridis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c2d59acf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='Pclass', ylabel='Age'>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x='Pclass',y=\"Age\",data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ad7ee28c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fillage(cols):\n",
    "    age=cols[0]\n",
    "    pclass=cols[1]\n",
    "    \n",
    "    if (pd.isnull(age)):\n",
    "        if pclass==1:\n",
    "            return 38\n",
    "        elif pclass==2:\n",
    "            return 30\n",
    "        else:\n",
    "            return 27\n",
    "    else:\n",
    "        return age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ecad0b65",
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"Age\"]=df[[\"Age\",\"Pclass\"]].apply(fillage,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "fd38cf7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap=\"viridis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "77c19261",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age              0\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "37af30fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(\"Cabin\",axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "93e32712",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap=\"viridis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d7b8e824",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "edc5c5ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    0\n",
       "Survived       0\n",
       "Pclass         0\n",
       "Name           0\n",
       "Sex            0\n",
       "Age            0\n",
       "SibSp          0\n",
       "Parch          0\n",
       "Ticket         0\n",
       "Fare           0\n",
       "Embarked       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "338871e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 889 entries, 0 to 890\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  889 non-null    int64  \n",
      " 1   Survived     889 non-null    int64  \n",
      " 2   Pclass       889 non-null    int64  \n",
      " 3   Name         889 non-null    object \n",
      " 4   Sex          889 non-null    object \n",
      " 5   Age          889 non-null    float64\n",
      " 6   SibSp        889 non-null    int64  \n",
      " 7   Parch        889 non-null    int64  \n",
      " 8   Ticket       889 non-null    object \n",
      " 9   Fare         889 non-null    float64\n",
      " 10  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(4)\n",
      "memory usage: 83.3+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "b28d1790",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Embarked  \n",
       "0      0         A/5 21171   7.2500        S  \n",
       "1      0          PC 17599  71.2833        C  \n",
       "2      0  STON/O2. 3101282   7.9250        S  \n",
       "3      0            113803  53.1000        S  \n",
       "4      0            373450   8.0500        S  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5a8c833f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop([\"PassengerId\",\"Name\",\"Ticket\"],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9903efeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived  Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n",
       "0         0       3    male  22.0      1      0   7.2500        S\n",
       "1         1       1  female  38.0      1      0  71.2833        C\n",
       "2         1       3  female  26.0      0      0   7.9250        S\n",
       "3         1       1  female  35.0      1      0  53.1000        S\n",
       "4         0       3    male  35.0      0      0   8.0500        S"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef145d06",
   "metadata": {},
   "source": [
    "# Saperation of X and Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "01a381c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.iloc[:,1:]\n",
    "y = df.iloc[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f6d5f5c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>2</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>3</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>889 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass     Sex   Age  SibSp  Parch     Fare Embarked\n",
       "0         3    male  22.0      1      0   7.2500        S\n",
       "1         1  female  38.0      1      0  71.2833        C\n",
       "2         3  female  26.0      0      0   7.9250        S\n",
       "3         1  female  35.0      1      0  53.1000        S\n",
       "4         3    male  35.0      0      0   8.0500        S\n",
       "..      ...     ...   ...    ...    ...      ...      ...\n",
       "886       2    male  27.0      0      0  13.0000        S\n",
       "887       1  female  19.0      0      0  30.0000        S\n",
       "888       3  female  27.0      1      2  23.4500        S\n",
       "889       1    male  26.0      0      0  30.0000        C\n",
       "890       3    male  32.0      0      0   7.7500        Q\n",
       "\n",
       "[889 rows x 7 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "82830e9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      1\n",
       "2      1\n",
       "3      1\n",
       "4      0\n",
       "      ..\n",
       "886    0\n",
       "887    1\n",
       "888    0\n",
       "889    1\n",
       "890    0\n",
       "Name: Survived, Length: 889, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "309edd6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S    644\n",
       "C    168\n",
       "Q     77\n",
       "Name: Embarked, dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.Embarked.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9a19b474",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "male      577\n",
       "female    312\n",
       "Name: Sex, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.Sex.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "f6eb1e65",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "\n",
    "oe = OrdinalEncoder()\n",
    "\n",
    "x[[\"Sex\",\"Embarked\"]] = oe.fit_transform(x[[\"Sex\",\"Embarked\"]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "09904167",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>889 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n",
       "0         3  1.0  22.0      1      0   7.2500       2.0\n",
       "1         1  0.0  38.0      1      0  71.2833       0.0\n",
       "2         3  0.0  26.0      0      0   7.9250       2.0\n",
       "3         1  0.0  35.0      1      0  53.1000       2.0\n",
       "4         3  1.0  35.0      0      0   8.0500       2.0\n",
       "..      ...  ...   ...    ...    ...      ...       ...\n",
       "886       2  1.0  27.0      0      0  13.0000       2.0\n",
       "887       1  0.0  19.0      0      0  30.0000       2.0\n",
       "888       3  0.0  27.0      1      2  23.4500       2.0\n",
       "889       1  1.0  26.0      0      0  30.0000       0.0\n",
       "890       3  1.0  32.0      0      0   7.7500       1.0\n",
       "\n",
       "[889 rows x 7 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "412b61a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3,random_state=1,stratify=y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d8e0471",
   "metadata": {},
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2cb5a380",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "logreg = LogisticRegression()\n",
    "\n",
    "logreg.fit(xtrain,ytrain)\n",
    "\n",
    "ypred = logreg.predict(xtest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a5d4a4fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy :- 0.8052434456928839\n",
      " [[141  24]\n",
      " [ 28  74]]\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.85      0.84       165\n",
      "           1       0.76      0.73      0.74       102\n",
      "\n",
      "    accuracy                           0.81       267\n",
      "   macro avg       0.79      0.79      0.79       267\n",
      "weighted avg       0.80      0.81      0.80       267\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score,confusion_matrix,classification_report\n",
    "\n",
    "ac = accuracy_score(ytest,ypred)\n",
    "\n",
    "cm = confusion_matrix(ytest,ypred)\n",
    "\n",
    "cf = classification_report(ytest,ypred)\n",
    "\n",
    "print(f\"Accuracy :- {ac}\\n {cm}\\n {cf}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "6ab739d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7864077669902912"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "81/103"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6d9e3347",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Accuracy :- 0.8054662379421221\n",
      " Testing Accuracy :- 0.8052434456928839\n"
     ]
    }
   ],
   "source": [
    "train = logreg.score(xtrain,ytrain)\n",
    "test = logreg.score(xtest,ytest)\n",
    "\n",
    "print(f\"Training Accuracy :- {train}\\n Testing Accuracy :- {test}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f74ed36",
   "metadata": {},
   "source": [
    "# Forecast New Observation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "2943bdc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pclass  Sex   Age  SibSp  Parch     Fare  Embarked\n",
       "0       3  1.0  22.0      1      0   7.2500       2.0\n",
       "1       1  0.0  38.0      1      0  71.2833       0.0\n",
       "2       3  0.0  26.0      0      0   7.9250       2.0\n",
       "3       1  0.0  35.0      1      0  53.1000       2.0\n",
       "4       3  1.0  35.0      0      0   8.0500       2.0"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5b60ea05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>OrdinalEncoder()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "OrdinalEncoder()"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "33235b1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array(['female', 'male'], dtype=object), array(['C', 'Q', 'S'], dtype=object)]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oe.categories_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "28a8e1ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 2.]])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s = \"female\"\n",
    "e = \"S\"\n",
    "\n",
    "oe.transform([[s,e]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "ac0cebcd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'S'"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pclass = 1\n",
    "sex = \"female\"\n",
    "age = 23\n",
    "sibsp = 0\n",
    "parch = 1\n",
    "fare = 31\n",
    "embarked = \"S\"\n",
    "\n",
    "newob = [pclass,sex,age,sibsp,parch,fare,embarked]\n",
    "newob[1]\n",
    "newob[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "ed36ce02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 2.]])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oe.transform([[newob[1],newob[-1]]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a61123e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 0.0, 23, 0, 1, 31, 2.0]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newob[1],newob[-1]=oe.transform([[newob[1],newob[-1]]])[0]\n",
    "newob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "e9b66d06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1], dtype=int64)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.predict([newob])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ddfaaf8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predictsurvived():\n",
    "    pclass = int(input(\"Enter Passenger Class:- \"))\n",
    "    sex = input(\"Enter Gender Of a Passeneger:- \")\n",
    "    age = int(input(\"Enter Age of The Passenger :- \"))\n",
    "    sibsp = int(input(\"Enter No of SibSp Of Passenger:- \"))\n",
    "    parch = int(input(\"Enter No Of Parch of Passenegr:- \"))\n",
    "    fare = float(input(\"Enter Ticket Fare:- \"))\n",
    "    embarked = input(\"Enter Port Embarkation :- \")\n",
    "    \n",
    "    newob = [pclass,sex,age,sibsp,parch,fare,embarked]\n",
    "    newob[1],newob[-1]=oe.transform([[newob[1],newob[-1]]])[0]\n",
    "    v = logreg.predict([newob])[0]\n",
    "    \n",
    "    if v==1:\n",
    "        print(\"Yes, With the Given Features the Passeneger Will Survived...!!!!\")\n",
    "    else:\n",
    "        print(\"No, With the Given Features the Passeneger Will Not Survived...!!!!\")\n",
    "        \n",
    "    return v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "d698a00d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter Passenger Class:- 1\n",
      "Enter Gender Of a Passeneger:- male\n",
      "Enter Age of The Passenger :- 21\n",
      "Enter No of SibSp Of Passenger:- 0\n",
      "Enter No Of Parch of Passenegr:- 0\n",
      "Enter Ticket Fare:- 0.15\n",
      "Enter Port Embarkation :- Q\n",
      "Yes, With the Given Features the Passeneger Will Survived...!!!!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictsurvived()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "c0fad8c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Embarked  Survived\n",
       "C         0            75\n",
       "          1            93\n",
       "Q         0            47\n",
       "          1            30\n",
       "S         0           427\n",
       "          1           217\n",
       "dtype: int64"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sur_count=df.groupby([\"Embarked\",\"Survived\"]).size()\n",
    "sur_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "3737a119",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass  Survived\n",
       "1       0            80\n",
       "        1           134\n",
       "2       0            97\n",
       "        1            87\n",
       "3       0           372\n",
       "        1           119\n",
       "dtype: int64"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sur_count=df.groupby([\"Pclass\",\"Survived\"]).size()\n",
    "sur_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "898d7784",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
